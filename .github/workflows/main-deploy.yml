name: Deploy Main App

run-name: "Deploy Main App for ${{ github.ref_name }} by ${{ github.actor }}"

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup SSH
        run: |
          set -e
          mkdir -p ~/.ssh

          # Выводим длину и первые строки ключа для проверки (секрет скрывается в логах)
          echo "KEY LENGTH: $(echo "${{ secrets.SERVER_SSH_KEY }}" | wc -c)"
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa

          chmod 600 ~/.ssh/id_rsa
          ls -l ~/.ssh
          head -2 ~/.ssh/id_rsa | sed 's/./*/g' # маскируем вывод

          # Проверяем, что переменная с хостом задана
          echo "HOST: ${{ secrets.SERVER_HOST }}"

          # Складываем известные хосты
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
          cat ~/.ssh/known_hosts

      - name: Deploy on server
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'

            mkdir -p ~/aledev
            cd ~/aledev

            echo "${{ secrets.ENV_VARS }}" > ~/aledev/.env
            echo "Файл .env загружен на сервер"

            curl -o ~/aledev/docker-compose.prod.yaml https://raw.githubusercontent.com/aleksioprime/aledev/main/docker-compose.prod.yaml

            if [ ! -f ~/aledev/nginx/nginx.conf ]; then
              echo "Файл nginx/nginx.conf не найден. Скачиваем..."
              mkdir -p ~/aledev/nginx
              curl -v -o ~/aledev/nginx/nginx.conf https://raw.githubusercontent.com/aleksioprime/aledev/main/frontend/nginx/nginx.conf
            else
              echo "Файл nginx/nginx.conf уже существует. Не скачиваем."
            fi

            echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

            docker compose -f docker-compose.prod.yaml down
            docker compose -f docker-compose.prod.yaml pull
            docker compose -f docker-compose.prod.yaml up -d --remove-orphans

            docker image prune -a -f
            echo "Готово!"

          EOF
